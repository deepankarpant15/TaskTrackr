package prac;

public class esd {
	 public static int matrixChainOrder(int[] p, int n) {
	        int[][] dp = new int[n][n];

	        // Initialize the main diagonal to zero
	        for (int i = 1; i < n; i++) {
	            dp[i][i] = 0;
	        }

	        // l is chain length
	        for (int l = 2; l < n; l++) {
	            for (int i = 1; i < n - l + 1; i++) {
	                int j = i + l - 1;
	                dp[i][j] = Integer.MAX_VALUE;

	                for (int k = i; k < j; k++) {
	                    int q = dp[i][k] + dp[k + 1][j] + p[i - 1] * p[k] * p[j];
	                    if (q < dp[i][j]) {
	                        dp[i][j] = q;
	                    }
	                }
	            }
	        }
	        return dp[1][n - 1];
	    }

	    public static void main(String[] args) {
	        int[] p = {1, 2, 3, 4}; // Example dimensions
	        int n = p.length;
	        System.out.println("Minimum number of multiplications is " + matrixChainOrder(p, n));
	    }
	}


